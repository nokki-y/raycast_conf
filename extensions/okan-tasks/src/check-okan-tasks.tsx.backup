import { List, ActionPanel, Action, showToast, Toast, Icon } from "@raycast/api";
import React, { useEffect, useState } from "react";
import { getIncompleteTasks, OkanTask } from "./okan-service";

export default function Command() {
  const [tasks, setTasks] = useState<OkanTask[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function fetchTasks() {
      try {
        console.log("タスク取得を開始します...");
        setIsLoading(true);
        const incompleteTasks = await getIncompleteTasks();
        console.log(`取得したタスク数: ${incompleteTasks.length}`);
        setTasks(incompleteTasks);

        if (incompleteTasks.length === 0) {
          showToast({
            style: Toast.Style.Success,
            title: "未完了タスクはありません",
            message: "お疲れ様です!",
          });
        } else {
          showToast({
            style: Toast.Style.Success,
            title: "タスクを取得しました",
            message: `${incompleteTasks.length}件の未完了タスクがあります`,
          });
        }
      } catch (err) {
        console.error("エラーが発生しました:", err);
        const errorMessage = err instanceof Error ? err.message : "不明なエラーが発生しました";
        const errorStack = err instanceof Error ? err.stack : "";
        console.error("エラーメッセージ:", errorMessage);
        console.error("スタックトレース:", errorStack);
        setError(errorMessage);
        showToast({
          style: Toast.Style.Failure,
          title: "エラー",
          message: errorMessage,
        });
      } finally {
        setIsLoading(false);
      }
    }

    fetchTasks();
  }, []);

  if (error) {
    return (
      <List>
        <List.EmptyView
          icon={Icon.XMarkCircle}
          title="エラーが発生しました"
          description={error}
        />
      </List>
    );
  }

  return (
    <List isLoading={isLoading} searchBarPlaceholder="タスクを検索...">
      {tasks.length === 0 && !isLoading ? (
        <List.EmptyView
          icon={Icon.CheckCircle}
          title="未完了タスクはありません"
          description="お疲れ様です!"
        />
      ) : (
        tasks.map((task) => (
          <List.Item
            key={task.rowNumber}
            icon={Icon.Circle}
            title={task.taskName}
            subtitle={`${task.date} ${task.time}`}
            accessories={[
              { text: task.assignee },
              { tag: { value: task.status || "未着手", color: "#FF6B6B" } },
            ]}
            actions={
              <ActionPanel>
                <Action.OpenInBrowser
                  title="スプレッドシートで開く"
                  url={task.url}
                  icon={Icon.Globe}
                />
                <Action.CopyToClipboard
                  title="タスク名をコピー"
                  content={task.taskName}
                  shortcut={{ modifiers: ["cmd"], key: "c" }}
                />
                <Action.CopyToClipboard
                  title="URLをコピー"
                  content={task.url}
                  shortcut={{ modifiers: ["cmd", "shift"], key: "c" }}
                />
              </ActionPanel>
            }
          />
        ))
      )}
    </List>
  );
}
